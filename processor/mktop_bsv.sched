=== Generated schedule for mktop_bsv ===

Rule schedule
-------------
Rule: bram_serverAdapterA_outData_enqueue
Predicate: bram_serverAdapterA_outData_enqw.whas &&
	   ((! bram_serverAdapterA_outData_dequeueing.whas) ||
	    bram_serverAdapterA_outData_ff.i_notEmpty)
Blocking rules: (none)
 
Rule: bram_serverAdapterA_outData_dequeue
Predicate: bram_serverAdapterA_outData_dequeueing.whas &&
	   bram_serverAdapterA_outData_ff.i_notEmpty
Blocking rules: (none)
 
Rule: bram_serverAdapterA_cnt_finalAdd
Predicate: bram_serverAdapterA_cnt_1.whas || bram_serverAdapterA_cnt_2.whas ||
	   bram_serverAdapterA_cnt_3.whas
Blocking rules: (none)
 
Rule: bram_serverAdapterA_s1__dreg_update
Predicate: True
Blocking rules: (none)
 
Rule: bram_serverAdapterA_stageReadResponseAlways
Predicate: bram_serverAdapterA_writeWithResp.whas
Blocking rules: (none)
 
Rule: bram_serverAdapterA_moveToOutFIFO
Predicate: ((! bram_serverAdapterA_s1[0]) ||
	    bram_serverAdapterA_outData_ff.i_notFull) &&
	   bram_serverAdapterA_s1[1]
Blocking rules: (none)
 
Rule: bram_serverAdapterA_overRun
Predicate: bram_serverAdapterA_s1[1] &&
	   ((! bram_serverAdapterA_outData_beforeEnq.read) ||
	    (! bram_serverAdapterA_outData_beforeDeq.read) ||
	    (! bram_serverAdapterA_outData_ff.i_notFull))
Blocking rules: (none)
 
Rule: bram_serverAdapterB_outData_enqueue
Predicate: bram_serverAdapterB_outData_enqw.whas &&
	   ((! bram_serverAdapterB_outData_dequeueing.whas) ||
	    bram_serverAdapterB_outData_ff.i_notEmpty)
Blocking rules: (none)
 
Rule: bram_serverAdapterB_outData_dequeue
Predicate: bram_serverAdapterB_outData_dequeueing.whas &&
	   bram_serverAdapterB_outData_ff.i_notEmpty
Blocking rules: (none)
 
Rule: bram_serverAdapterB_cnt_finalAdd
Predicate: bram_serverAdapterB_cnt_1.whas || bram_serverAdapterB_cnt_2.whas ||
	   bram_serverAdapterB_cnt_3.whas
Blocking rules: (none)
 
Rule: bram_serverAdapterB_s1__dreg_update
Predicate: True
Blocking rules: (none)
 
Rule: bram_serverAdapterB_stageReadResponseAlways
Predicate: bram_serverAdapterB_writeWithResp.whas
Blocking rules: (none)
 
Rule: bram_serverAdapterB_moveToOutFIFO
Predicate: ((! bram_serverAdapterB_s1[0]) ||
	    bram_serverAdapterB_outData_ff.i_notFull) &&
	   bram_serverAdapterB_s1[1]
Blocking rules: (none)
 
Rule: bram_serverAdapterB_overRun
Predicate: bram_serverAdapterB_s1[1] &&
	   ((! bram_serverAdapterB_outData_beforeEnq.read) ||
	    (! bram_serverAdapterB_outData_beforeDeq.read) ||
	    (! bram_serverAdapterB_outData_ff.i_notFull))
Blocking rules: (none)
 
Rule: rv_core_do_tic_logging
Predicate: True
Blocking rules: (none)
 
Rule: rv_core_fetch
Predicate: (! rv_core_toImem_rv.port0__read[68]) &&
	   (rv_core_state == 2'd0) && (! rv_core_starting)
Blocking rules: (none)
 
Rule: rv_core_decode
Predicate: rv_core_fromImem_rv.port1__read[68] &&
	   (rv_core_state == 2'd1) && (! rv_core_starting)
Blocking rules: (none)
 
Rule: rv_core_execute
Predicate: (rv_core_dInst[6] || (! (rv_core_dInst[4:3] == 2'b0)) ||
	    ((((rv_core_rv1 +
		((rv_core_dInst[35] &&
		  ((rv_core_dInst[35]
		    ? rv_core_dInst[34:32]
		    : (_ :: Bit 3)) ==
		   3'd0))
		 ? sext rv_core_dInst[31:20]
		 : ((rv_core_dInst[35] &&
		     ((rv_core_dInst[35]
		       ? rv_core_dInst[34:32]
		       : (_ :: Bit 3)) ==
		      3'd1))
		    ? sext {rv_core_dInst[31:25], rv_core_dInst[11:7]}
		    : ((rv_core_dInst[35] &&
			((rv_core_dInst[35]
			  ? rv_core_dInst[34:32]
			  : (_ :: Bit 3)) ==
			 3'd2))
		       ? sext {rv_core_dInst[31], rv_core_dInst[7], rv_core_dInst[30:25], rv_core_dInst[11:8], 1'b0}
		       : ((rv_core_dInst[35] &&
			   ((rv_core_dInst[35]
			     ? rv_core_dInst[34:32]
			     : (_ :: Bit 3)) ==
			    3'd3))
			  ? {rv_core_dInst[31:12], 12'b0}
			  : ((rv_core_dInst[35] &&
			      ((rv_core_dInst[35]
				? rv_core_dInst[34:32]
				: (_ :: Bit 3)) ==
			       3'd4))
			     ? sext {rv_core_dInst[31], rv_core_dInst[19:12], rv_core_dInst[20], rv_core_dInst[30:21], 1'b0}
			     : 32'd0))))))[31:2] ==
	       30'd1006649340) ||
	      ((rv_core_rv1 +
		((rv_core_dInst[35] &&
		  ((rv_core_dInst[35]
		    ? rv_core_dInst[34:32]
		    : (_ :: Bit 3)) ==
		   3'd0))
		 ? sext rv_core_dInst[31:20]
		 : ((rv_core_dInst[35] &&
		     ((rv_core_dInst[35]
		       ? rv_core_dInst[34:32]
		       : (_ :: Bit 3)) ==
		      3'd1))
		    ? sext {rv_core_dInst[31:25], rv_core_dInst[11:7]}
		    : ((rv_core_dInst[35] &&
			((rv_core_dInst[35]
			  ? rv_core_dInst[34:32]
			  : (_ :: Bit 3)) ==
			 3'd2))
		       ? sext {rv_core_dInst[31], rv_core_dInst[7], rv_core_dInst[30:25], rv_core_dInst[11:8], 1'b0}
		       : ((rv_core_dInst[35] &&
			   ((rv_core_dInst[35]
			     ? rv_core_dInst[34:32]
			     : (_ :: Bit 3)) ==
			    3'd3))
			  ? {rv_core_dInst[31:12], 12'b0}
			  : ((rv_core_dInst[35] &&
			      ((rv_core_dInst[35]
				? rv_core_dInst[34:32]
				: (_ :: Bit 3)) ==
			       3'd4))
			     ? sext {rv_core_dInst[31], rv_core_dInst[19:12], rv_core_dInst[20], rv_core_dInst[30:21], 1'b0}
			     : 32'd0))))))[31:2] ==
	       30'd1006649341) ||
	      ((rv_core_rv1 +
		((rv_core_dInst[35] &&
		  ((rv_core_dInst[35]
		    ? rv_core_dInst[34:32]
		    : (_ :: Bit 3)) ==
		   3'd0))
		 ? sext rv_core_dInst[31:20]
		 : ((rv_core_dInst[35] &&
		     ((rv_core_dInst[35]
		       ? rv_core_dInst[34:32]
		       : (_ :: Bit 3)) ==
		      3'd1))
		    ? sext {rv_core_dInst[31:25], rv_core_dInst[11:7]}
		    : ((rv_core_dInst[35] &&
			((rv_core_dInst[35]
			  ? rv_core_dInst[34:32]
			  : (_ :: Bit 3)) ==
			 3'd2))
		       ? sext {rv_core_dInst[31], rv_core_dInst[7], rv_core_dInst[30:25], rv_core_dInst[11:8], 1'b0}
		       : ((rv_core_dInst[35] &&
			   ((rv_core_dInst[35]
			     ? rv_core_dInst[34:32]
			     : (_ :: Bit 3)) ==
			    3'd3))
			  ? {rv_core_dInst[31:12], 12'b0}
			  : ((rv_core_dInst[35] &&
			      ((rv_core_dInst[35]
				? rv_core_dInst[34:32]
				: (_ :: Bit 3)) ==
			       3'd4))
			     ? sext {rv_core_dInst[31], rv_core_dInst[19:12], rv_core_dInst[20], rv_core_dInst[30:21], 1'b0}
			     : 32'd0))))))[31:2] ==
	       30'd1006649342))
	     ? ! rv_core_toMMIO_rv.port0__read[68]
	     : (! rv_core_toDmem_rv.port0__read[68]))) &&
	   (rv_core_state == 2'd2) && (! rv_core_starting)
Blocking rules: (none)
 
Rule: rv_core_writeback
Predicate: rv_core_retired.i_notFull &&
	   (rv_core_dInst[6] || (! (rv_core_dInst[4:3] == 2'b0)) ||
	    (rv_core_mem_business[0]
	     ? rv_core_fromMMIO_rv.port1__read[68]
	     : rv_core_fromDmem_rv.port1__read[68])) &&
	   ((! rv_core_dInst[36]) ||
	    (rv_core_dInst[11:7] == 5'd0) ||
	    rv_core_dInst[6] || (! (rv_core_dInst[4:3] == 2'b0)) ||
	    (((rv_core_mem_business[5:3] == 3'b0) ||
	      (rv_core_mem_business[5:3] == 3'b1) ||
	      (rv_core_mem_business[5:3] == 3'b100) ||
	      (rv_core_mem_business[5:3] == 3'b101))
	     ? rv_core_mem_business[0]
	       ? rv_core_fromMMIO_rv.port1__read[68]
	       : rv_core_fromDmem_rv.port1__read[68]
	     : ((! (rv_core_mem_business[5:3] == 3'b10)) ||
		(rv_core_mem_business[0]
		 ? rv_core_fromMMIO_rv.port1__read[68]
		 : rv_core_fromDmem_rv.port1__read[68])))) &&
	   (rv_core_state == 2'd3) && (! rv_core_starting)
Blocking rules: (none)
 
Rule: rv_core_administrative_konata_commit
Predicate: rv_core_retired.i_notEmpty
Blocking rules: (none)
 
Rule: rv_core_administrative_konata_flush
Predicate: rv_core_squashed.i_notEmpty
Blocking rules: (none)
 
Rule: tic
Predicate: True
Blocking rules: (none)
 
Rule: requestI
Predicate: rv_core_toImem_rv.port1__read[68] &&
	   (bram_serverAdapterB_cnt .< 3'd3)
Blocking rules: (none)
 
Rule: responseI
Predicate: bram_serverAdapterB_outData_beforeDeq.read &&
	   (bram_serverAdapterB_outData_ff.i_notEmpty ||
	    bram_serverAdapterB_outData_enqw.whas) &&
	   (! rv_core_fromImem_rv.port0__read[68])
Blocking rules: (none)
 
Rule: requestD
Predicate: rv_core_toDmem_rv.port1__read[68] &&
	   (bram_serverAdapterA_cnt .< 3'd3)
Blocking rules: (none)
 
Rule: responseD
Predicate: bram_serverAdapterA_outData_beforeDeq.read &&
	   (bram_serverAdapterA_outData_ff.i_notEmpty ||
	    bram_serverAdapterA_outData_enqw.whas) &&
	   (! rv_core_fromDmem_rv.port0__read[68])
Blocking rules: (none)
 
Rule: requestMMIO
Predicate: rv_core_toMMIO_rv.port1__read[68] && mmioreq.i_notFull
Blocking rules: (none)
 
Rule: responseMMIO
Predicate: mmioreq.i_notEmpty && (! rv_core_fromMMIO_rv.port0__read[68])
Blocking rules: (none)
 
Logical execution order: tic,
			 responseMMIO,
			 bram_serverAdapterA_overRun,
			 bram_serverAdapterA_moveToOutFIFO,
			 responseD,
			 bram_serverAdapterA_outData_enqueue,
			 bram_serverAdapterA_outData_dequeue,
			 bram_serverAdapterB_overRun,
			 bram_serverAdapterB_moveToOutFIFO,
			 responseI,
			 bram_serverAdapterB_outData_enqueue,
			 bram_serverAdapterB_outData_dequeue,
			 rv_core_fetch,
			 requestI,
			 bram_serverAdapterB_stageReadResponseAlways,
			 bram_serverAdapterB_cnt_finalAdd,
			 bram_serverAdapterB_s1__dreg_update,
			 rv_core_decode,
			 rv_core_execute,
			 requestD,
			 requestMMIO,
			 bram_serverAdapterA_stageReadResponseAlways,
			 bram_serverAdapterA_cnt_finalAdd,
			 bram_serverAdapterA_s1__dreg_update,
			 rv_core_writeback,
			 rv_core_administrative_konata_commit,
			 rv_core_administrative_konata_flush,
			 rv_core_do_tic_logging

=========================================
