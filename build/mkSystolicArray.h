/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Sun May 14 19:12:04 EDT 2023
 * 
 */

/* Generation options: */
#ifndef __mkSystolicArray_h__
#define __mkSystolicArray_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkProcessingElement.h"


/* Class declaration for the mkSystolicArray module */
class MOD_mkSystolicArray : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkProcessingElement INST_array_0_0;
  MOD_mkProcessingElement INST_array_0_1;
  MOD_mkProcessingElement INST_array_0_2;
  MOD_mkProcessingElement INST_array_0_3;
  MOD_mkProcessingElement INST_array_1_0;
  MOD_mkProcessingElement INST_array_1_1;
  MOD_mkProcessingElement INST_array_1_2;
  MOD_mkProcessingElement INST_array_1_3;
  MOD_mkProcessingElement INST_array_2_0;
  MOD_mkProcessingElement INST_array_2_1;
  MOD_mkProcessingElement INST_array_2_2;
  MOD_mkProcessingElement INST_array_2_3;
  MOD_mkProcessingElement INST_array_3_0;
  MOD_mkProcessingElement INST_array_3_1;
  MOD_mkProcessingElement INST_array_3_2;
  MOD_mkProcessingElement INST_array_3_3;
  MOD_Reg<tUInt32> INST_count;
  MOD_Reg<tUInt8> INST_file_valid;
  MOD_Wire<tUInt32> INST_left_0_0_port_0;
  MOD_Wire<tUInt32> INST_left_0_0_port_1;
  MOD_Reg<tUInt8> INST_left_0_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_0_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_0_0_register;
  MOD_Wire<tUInt32> INST_left_0_1_port_0;
  MOD_Wire<tUInt32> INST_left_0_1_port_1;
  MOD_Reg<tUInt8> INST_left_0_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_0_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_0_1_register;
  MOD_Wire<tUInt32> INST_left_0_2_port_0;
  MOD_Wire<tUInt32> INST_left_0_2_port_1;
  MOD_Reg<tUInt8> INST_left_0_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_0_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_0_2_register;
  MOD_Wire<tUInt32> INST_left_0_3_port_0;
  MOD_Wire<tUInt32> INST_left_0_3_port_1;
  MOD_Reg<tUInt8> INST_left_0_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_0_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_0_3_register;
  MOD_Wire<tUInt32> INST_left_1_0_port_0;
  MOD_Wire<tUInt32> INST_left_1_0_port_1;
  MOD_Reg<tUInt8> INST_left_1_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_1_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_1_0_register;
  MOD_Wire<tUInt32> INST_left_1_1_port_0;
  MOD_Wire<tUInt32> INST_left_1_1_port_1;
  MOD_Reg<tUInt8> INST_left_1_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_1_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_1_1_register;
  MOD_Wire<tUInt32> INST_left_1_2_port_0;
  MOD_Wire<tUInt32> INST_left_1_2_port_1;
  MOD_Reg<tUInt8> INST_left_1_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_1_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_1_2_register;
  MOD_Wire<tUInt32> INST_left_1_3_port_0;
  MOD_Wire<tUInt32> INST_left_1_3_port_1;
  MOD_Reg<tUInt8> INST_left_1_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_1_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_1_3_register;
  MOD_Wire<tUInt32> INST_left_2_0_port_0;
  MOD_Wire<tUInt32> INST_left_2_0_port_1;
  MOD_Reg<tUInt8> INST_left_2_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_2_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_2_0_register;
  MOD_Wire<tUInt32> INST_left_2_1_port_0;
  MOD_Wire<tUInt32> INST_left_2_1_port_1;
  MOD_Reg<tUInt8> INST_left_2_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_2_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_2_1_register;
  MOD_Wire<tUInt32> INST_left_2_2_port_0;
  MOD_Wire<tUInt32> INST_left_2_2_port_1;
  MOD_Reg<tUInt8> INST_left_2_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_2_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_2_2_register;
  MOD_Wire<tUInt32> INST_left_2_3_port_0;
  MOD_Wire<tUInt32> INST_left_2_3_port_1;
  MOD_Reg<tUInt8> INST_left_2_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_2_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_2_3_register;
  MOD_Wire<tUInt32> INST_left_3_0_port_0;
  MOD_Wire<tUInt32> INST_left_3_0_port_1;
  MOD_Reg<tUInt8> INST_left_3_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_3_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_3_0_register;
  MOD_Wire<tUInt32> INST_left_3_1_port_0;
  MOD_Wire<tUInt32> INST_left_3_1_port_1;
  MOD_Reg<tUInt8> INST_left_3_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_3_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_3_1_register;
  MOD_Wire<tUInt32> INST_left_3_2_port_0;
  MOD_Wire<tUInt32> INST_left_3_2_port_1;
  MOD_Reg<tUInt8> INST_left_3_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_3_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_3_2_register;
  MOD_Wire<tUInt32> INST_left_3_3_port_0;
  MOD_Wire<tUInt32> INST_left_3_3_port_1;
  MOD_Reg<tUInt8> INST_left_3_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_left_3_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_left_3_3_register;
  MOD_Reg<tUInt32> INST_out_file;
  MOD_Reg<tUInt32> INST_pe_iter_num;
  MOD_Reg<tUInt8> INST_pe_op_finished;
  MOD_Reg<tUInt8> INST_pe_receive_done;
  MOD_Reg<tUInt32> INST_pe_state;
  MOD_Reg<tUInt8> INST_ready;
  MOD_Wire<tUInt32> INST_top_0_0_port_0;
  MOD_Wire<tUInt32> INST_top_0_0_port_1;
  MOD_Reg<tUInt8> INST_top_0_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_0_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_0_0_register;
  MOD_Wire<tUInt32> INST_top_0_1_port_0;
  MOD_Wire<tUInt32> INST_top_0_1_port_1;
  MOD_Reg<tUInt8> INST_top_0_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_0_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_0_1_register;
  MOD_Wire<tUInt32> INST_top_0_2_port_0;
  MOD_Wire<tUInt32> INST_top_0_2_port_1;
  MOD_Reg<tUInt8> INST_top_0_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_0_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_0_2_register;
  MOD_Wire<tUInt32> INST_top_0_3_port_0;
  MOD_Wire<tUInt32> INST_top_0_3_port_1;
  MOD_Reg<tUInt8> INST_top_0_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_0_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_0_3_register;
  MOD_Wire<tUInt32> INST_top_1_0_port_0;
  MOD_Wire<tUInt32> INST_top_1_0_port_1;
  MOD_Reg<tUInt8> INST_top_1_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_1_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_1_0_register;
  MOD_Wire<tUInt32> INST_top_1_1_port_0;
  MOD_Wire<tUInt32> INST_top_1_1_port_1;
  MOD_Reg<tUInt8> INST_top_1_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_1_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_1_1_register;
  MOD_Wire<tUInt32> INST_top_1_2_port_0;
  MOD_Wire<tUInt32> INST_top_1_2_port_1;
  MOD_Reg<tUInt8> INST_top_1_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_1_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_1_2_register;
  MOD_Wire<tUInt32> INST_top_1_3_port_0;
  MOD_Wire<tUInt32> INST_top_1_3_port_1;
  MOD_Reg<tUInt8> INST_top_1_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_1_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_1_3_register;
  MOD_Wire<tUInt32> INST_top_2_0_port_0;
  MOD_Wire<tUInt32> INST_top_2_0_port_1;
  MOD_Reg<tUInt8> INST_top_2_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_2_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_2_0_register;
  MOD_Wire<tUInt32> INST_top_2_1_port_0;
  MOD_Wire<tUInt32> INST_top_2_1_port_1;
  MOD_Reg<tUInt8> INST_top_2_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_2_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_2_1_register;
  MOD_Wire<tUInt32> INST_top_2_2_port_0;
  MOD_Wire<tUInt32> INST_top_2_2_port_1;
  MOD_Reg<tUInt8> INST_top_2_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_2_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_2_2_register;
  MOD_Wire<tUInt32> INST_top_2_3_port_0;
  MOD_Wire<tUInt32> INST_top_2_3_port_1;
  MOD_Reg<tUInt8> INST_top_2_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_2_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_2_3_register;
  MOD_Wire<tUInt32> INST_top_3_0_port_0;
  MOD_Wire<tUInt32> INST_top_3_0_port_1;
  MOD_Reg<tUInt8> INST_top_3_0_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_3_0_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_3_0_register;
  MOD_Wire<tUInt32> INST_top_3_1_port_0;
  MOD_Wire<tUInt32> INST_top_3_1_port_1;
  MOD_Reg<tUInt8> INST_top_3_1_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_3_1_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_3_1_register;
  MOD_Wire<tUInt32> INST_top_3_2_port_0;
  MOD_Wire<tUInt32> INST_top_3_2_port_1;
  MOD_Reg<tUInt8> INST_top_3_2_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_3_2_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_3_2_register;
  MOD_Wire<tUInt32> INST_top_3_3_port_0;
  MOD_Wire<tUInt32> INST_top_3_3_port_1;
  MOD_Reg<tUInt8> INST_top_3_3_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_top_3_3_readBeforeLaterWrites_1;
  MOD_Reg<tUInt32> INST_top_3_3_register;
  MOD_Reg<tUInt32> INST_x1_0_0;
  MOD_Reg<tUInt32> INST_x1_0_1;
  MOD_Reg<tUInt32> INST_x1_0_2;
  MOD_Reg<tUInt32> INST_x1_0_3;
  MOD_Reg<tUInt32> INST_x1_1_0;
  MOD_Reg<tUInt32> INST_x1_1_1;
  MOD_Reg<tUInt32> INST_x1_1_2;
  MOD_Reg<tUInt32> INST_x1_1_3;
  MOD_Reg<tUInt32> INST_x1_2_0;
  MOD_Reg<tUInt32> INST_x1_2_1;
  MOD_Reg<tUInt32> INST_x1_2_2;
  MOD_Reg<tUInt32> INST_x1_2_3;
  MOD_Reg<tUInt32> INST_x1_3_0;
  MOD_Reg<tUInt32> INST_x1_3_1;
  MOD_Reg<tUInt32> INST_x1_3_2;
  MOD_Reg<tUInt32> INST_x1_3_3;
  MOD_Reg<tUInt32> INST_x2_0_0;
  MOD_Reg<tUInt32> INST_x2_0_1;
  MOD_Reg<tUInt32> INST_x2_0_2;
  MOD_Reg<tUInt32> INST_x2_0_3;
  MOD_Reg<tUInt32> INST_x2_1_0;
  MOD_Reg<tUInt32> INST_x2_1_1;
  MOD_Reg<tUInt32> INST_x2_1_2;
  MOD_Reg<tUInt32> INST_x2_1_3;
  MOD_Reg<tUInt32> INST_x2_2_0;
  MOD_Reg<tUInt32> INST_x2_2_1;
  MOD_Reg<tUInt32> INST_x2_2_2;
  MOD_Reg<tUInt32> INST_x2_2_3;
  MOD_Reg<tUInt32> INST_x2_3_0;
  MOD_Reg<tUInt32> INST_x2_3_1;
  MOD_Reg<tUInt32> INST_x2_3_2;
  MOD_Reg<tUInt32> INST_x2_3_3;
 
 /* Constructor */
 public:
  MOD_mkSystolicArray(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF_x__h33418;
  tUInt32 DEF_b__h21681;
  tUInt32 DEF_b__h22067;
 
 /* Local definitions */
 private:
  tUInt32 DEF_TASK_fopen___d231;
  tUInt32 DEF_b__h21424;
  tUInt32 DEF_b__h21425;
  tUInt32 DEF_b__h20880;
  tUInt32 DEF_b__h20881;
  tUInt32 DEF_b__h20336;
  tUInt32 DEF_b__h20337;
  tUInt32 DEF_b__h19792;
  tUInt32 DEF_b__h19793;
  tUInt32 DEF_b__h19225;
  tUInt32 DEF_b__h19226;
  tUInt32 DEF_b__h18681;
  tUInt32 DEF_b__h18682;
  tUInt32 DEF_b__h18137;
  tUInt32 DEF_b__h18138;
  tUInt32 DEF_b__h17593;
  tUInt32 DEF_b__h17594;
  tUInt32 DEF_b__h17026;
  tUInt32 DEF_b__h17027;
  tUInt32 DEF_b__h16482;
  tUInt32 DEF_b__h16483;
  tUInt32 DEF_b__h15938;
  tUInt32 DEF_b__h15939;
  tUInt32 DEF_b__h15394;
  tUInt32 DEF_b__h15395;
  tUInt32 DEF_b__h14827;
  tUInt32 DEF_b__h14828;
  tUInt32 DEF_b__h14280;
  tUInt32 DEF_b__h14281;
  tUInt32 DEF_b__h13733;
  tUInt32 DEF_b__h13734;
  tUInt32 DEF_b__h13186;
  tUInt32 DEF_b__h13187;
  tUInt32 DEF_b__h12209;
  tUInt32 DEF_b__h12210;
  tUInt32 DEF_b__h11665;
  tUInt32 DEF_b__h11666;
  tUInt32 DEF_b__h11121;
  tUInt32 DEF_b__h11122;
  tUInt32 DEF_b__h10577;
  tUInt32 DEF_b__h10578;
  tUInt32 DEF_b__h10010;
  tUInt32 DEF_b__h10011;
  tUInt32 DEF_b__h9466;
  tUInt32 DEF_b__h9467;
  tUInt32 DEF_b__h8922;
  tUInt32 DEF_b__h8923;
  tUInt32 DEF_b__h8378;
  tUInt32 DEF_b__h8379;
  tUInt32 DEF_b__h7811;
  tUInt32 DEF_b__h7812;
  tUInt32 DEF_b__h7267;
  tUInt32 DEF_b__h7268;
  tUInt32 DEF_b__h6723;
  tUInt32 DEF_b__h6724;
  tUInt32 DEF_b__h6179;
  tUInt32 DEF_b__h6180;
  tUInt32 DEF_b__h5612;
  tUInt32 DEF_b__h5613;
  tUInt32 DEF_b__h5065;
  tUInt32 DEF_b__h5066;
  tUInt32 DEF_b__h4518;
  tUInt32 DEF_b__h4519;
  tUInt32 DEF_b__h3971;
  tUInt32 DEF_b__h3972;
  tUInt8 DEF_pe_receive_done__h22204;
  tUInt8 DEF_pe_op_finished__h22268;
  tUInt32 DEF_IF_left_3_3_port_0_whas__20_THEN_left_3_3_port_ETC___d223;
  tUInt32 DEF_IF_top_3_3_port_0_whas__08_THEN_top_3_3_port_0_ETC___d111;
  tUInt32 DEF_IF_top_3_2_port_0_whas__01_THEN_top_3_2_port_0_ETC___d104;
  tUInt32 DEF_IF_top_3_1_port_0_whas__4_THEN_top_3_1_port_0__ETC___d97;
  tUInt32 DEF_IF_top_3_0_port_0_whas__7_THEN_top_3_0_port_0__ETC___d90;
  tUInt32 DEF_IF_left_2_3_port_0_whas__92_THEN_left_2_3_port_ETC___d195;
  tUInt32 DEF_IF_left_1_3_port_0_whas__64_THEN_left_1_3_port_ETC___d167;
  tUInt32 DEF_IF_left_0_3_port_0_whas__36_THEN_left_0_3_port_ETC___d139;
  tUInt32 DEF_IF_top_2_3_port_0_whas__0_THEN_top_2_3_port_0__ETC___d83;
  tUInt32 DEF_IF_top_1_3_port_0_whas__2_THEN_top_1_3_port_0__ETC___d55;
  tUInt32 DEF_IF_top_0_3_port_0_whas__4_THEN_top_0_3_port_0__ETC___d27;
  tUInt32 DEF_IF_top_2_2_port_0_whas__3_THEN_top_2_2_port_0__ETC___d76;
  tUInt32 DEF_IF_top_1_2_port_0_whas__5_THEN_top_1_2_port_0__ETC___d48;
  tUInt32 DEF_IF_top_0_2_port_0_whas__7_THEN_top_0_2_port_0__ETC___d20;
  tUInt32 DEF_IF_top_2_1_port_0_whas__6_THEN_top_2_1_port_0__ETC___d69;
  tUInt32 DEF_IF_top_1_1_port_0_whas__8_THEN_top_1_1_port_0__ETC___d41;
  tUInt32 DEF_IF_top_0_1_port_0_whas__0_THEN_top_0_1_port_0__ETC___d13;
  tUInt32 DEF_IF_top_2_0_port_0_whas__9_THEN_top_2_0_port_0__ETC___d62;
  tUInt32 DEF_IF_top_1_0_port_0_whas__1_THEN_top_1_0_port_0__ETC___d34;
  tUInt32 DEF_IF_top_0_0_port_0_whas_THEN_top_0_0_port_0_wge_ETC___d6;
  tUInt32 DEF_IF_left_3_2_port_0_whas__13_THEN_left_3_2_port_ETC___d216;
  tUInt32 DEF_IF_left_3_1_port_0_whas__06_THEN_left_3_1_port_ETC___d209;
  tUInt32 DEF_IF_left_3_0_port_0_whas__99_THEN_left_3_0_port_ETC___d202;
  tUInt32 DEF_IF_left_2_2_port_0_whas__85_THEN_left_2_2_port_ETC___d188;
  tUInt32 DEF_IF_left_2_1_port_0_whas__78_THEN_left_2_1_port_ETC___d181;
  tUInt32 DEF_IF_left_2_0_port_0_whas__71_THEN_left_2_0_port_ETC___d174;
  tUInt32 DEF_IF_left_1_2_port_0_whas__57_THEN_left_1_2_port_ETC___d160;
  tUInt32 DEF_IF_left_1_1_port_0_whas__50_THEN_left_1_1_port_ETC___d153;
  tUInt32 DEF_IF_left_1_0_port_0_whas__43_THEN_left_1_0_port_ETC___d146;
  tUInt32 DEF_IF_left_0_2_port_0_whas__29_THEN_left_0_2_port_ETC___d132;
  tUInt32 DEF_IF_left_0_1_port_0_whas__22_THEN_left_0_1_port_ETC___d125;
  tUInt32 DEF_IF_left_0_0_port_0_whas__15_THEN_left_0_0_port_ETC___d118;
 
 /* Rules */
 public:
  void RL_top_0_0_canonicalize();
  void RL_top_0_1_canonicalize();
  void RL_top_0_2_canonicalize();
  void RL_top_0_3_canonicalize();
  void RL_top_1_0_canonicalize();
  void RL_top_1_1_canonicalize();
  void RL_top_1_2_canonicalize();
  void RL_top_1_3_canonicalize();
  void RL_top_2_0_canonicalize();
  void RL_top_2_1_canonicalize();
  void RL_top_2_2_canonicalize();
  void RL_top_2_3_canonicalize();
  void RL_top_3_0_canonicalize();
  void RL_top_3_1_canonicalize();
  void RL_top_3_2_canonicalize();
  void RL_top_3_3_canonicalize();
  void RL_left_0_0_canonicalize();
  void RL_left_0_1_canonicalize();
  void RL_left_0_2_canonicalize();
  void RL_left_0_3_canonicalize();
  void RL_left_1_0_canonicalize();
  void RL_left_1_1_canonicalize();
  void RL_left_1_2_canonicalize();
  void RL_left_1_3_canonicalize();
  void RL_left_2_0_canonicalize();
  void RL_left_2_1_canonicalize();
  void RL_left_2_2_canonicalize();
  void RL_left_2_3_canonicalize();
  void RL_left_3_0_canonicalize();
  void RL_left_3_1_canonicalize();
  void RL_left_3_2_canonicalize();
  void RL_left_3_3_canonicalize();
  void RL_countCycles();
  void RL_set_outfile();
  void RL_pulse_data();
  void RL_pe_put();
  void RL_pe_compute();
  void RL_init();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSystolicArray &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkSystolicArray &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkSystolicArray &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkSystolicArray &backing);
};

#endif /* ifndef __mkSystolicArray_h__ */
